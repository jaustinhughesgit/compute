<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        body, html {
            margin: 0;
            height: 100%;
            overflow: hidden;
        }

        #board-container {
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: relative;
        }

        #board {
            position: absolute;
            width: 2000px;
            height: 2000px;
            background-color: #f3f3f3;
            border: 1px solid #d3d3d3;
        }

        #toolbar {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 10;
        }

        #rightbar {
            position: absolute;
            top: 10px;
            right: 10px;
            width:300px;
            height:600px;
            z-index: 10;
            background-color: antiquewhite;
        }

        button {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <div id="toolbar">
        <button id="dragMode">Drag</button>
        <button id="clickMode">Click</button>
    </div>
    <div id="rightbar">
    </div>
    <div id="board-container">
        <div id="board">
            <canvas id="myCanvas" width="2000" height="2000"></canvas>
        </div>
    </div>

    <script>
        var canvas = document.getElementById('myCanvas');
        var ctx = canvas.getContext('2d');
        var board = document.getElementById('board');
        var dragModeButton = document.getElementById('dragMode');
        var clickModeButton = document.getElementById('clickMode');
        var boxes = [];

        function drawBox(x, y, text) {
            ctx.beginPath();
            ctx.rect(x, y, 100, 50);
            ctx.stroke();
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText(text, x + 50, y + 25);
            boxes.push({ x: x, y: y, width: 100, height: 50, text: text });
        }

        function drawSLine(x1, y1, x2, y2) {
            var midY = (y1 + y2) / 2;
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.quadraticCurveTo(x2, midY, x2, y2);
            ctx.stroke();
        }

        var parentX = 1000;
        var parentY = 55;
        var childY = 145;
        drawBox(parentX - 50, parentY, 'Parent');
        var childOffsets = [-200, -100, 0, 100, 200];
        childOffsets.forEach(function(offset) {
            var childX = parentX + offset;
            drawBox(childX - 50, childY, 'Child');
            drawSLine(parentX, parentY + 50, childX, childY);
        });

        // Function to calculate the bounding box
function calculateBoundingBox(boxes) {
    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;

    boxes.forEach(box => {
        minX = Math.min(minX, box.x);
        minY = Math.min(minY, box.y);
        maxX = Math.max(maxX, box.x + box.width);
        maxY = Math.max(maxY, box.y + box.height);
    });

    return { minX, minY, maxX, maxY };
}

// Function to draw a dashed line box
function drawDashedBox(boundingBox) {
    ctx.setLineDash([10, 5]); // Set dash style
    ctx.beginPath();
    ctx.rect(boundingBox.minX - 10, boundingBox.minY - 10, boundingBox.maxX - boundingBox.minX + 20, boundingBox.maxY - boundingBox.minY + 20);
    ctx.stroke();
    ctx.setLineDash([]); // Reset to solid line
}
// Function to draw the label for the group
function drawGroupLabel(boundingBox) {
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText("Group", boundingBox.minX, boundingBox.minY - 20);
}

// After drawing all boxes and lines
let boundingBox = calculateBoundingBox(boxes);
drawDashedBox(boundingBox);
drawGroupLabel(boundingBox);



        let isDragging = false;
        let dragStartX, dragStartY;
        let mode = 'dragging';

        function enableDragging() {
            mode = 'dragging';
            board.style.cursor = 'grab';
        }

        function enableClicking() {
            mode = 'clicking';
            board.style.cursor = 'default';
        }

        dragModeButton.addEventListener('click', enableDragging);
        clickModeButton.addEventListener('click', enableClicking);

        board.addEventListener('mousedown', function(e) {
            if (mode === 'dragging') {
                isDragging = true;
                dragStartX = e.pageX - board.offsetLeft;
                dragStartY = e.pageY - board.offsetTop;
                board.style.cursor = 'grabbing';
            }
        });

        document.addEventListener('mouseup', function() {
            if (mode === 'dragging') {
                isDragging = false;
                board.style.cursor = 'grab';
            }
        });

        document.addEventListener('mousemove', function(e) {
            if (!isDragging || mode !== 'dragging') return;
            const newX = e.pageX - dragStartX;
            const newY = e.pageY - dragStartY;
            board.style.left = newX + 'px';
            board.style.top = newY + 'px';
        });

        function isInsideBox(x, y, box) {
            return x >= box.x && x <= box.x + box.width && y >= box.y && y <= box.y + box.height;
        }

        canvas.addEventListener('click', function(e) {
            if (mode === 'clicking') {
                var rect = canvas.getBoundingClientRect();
                var x = e.clientX - rect.left;
                var y = e.clientY - rect.top;
                for (var i = 0; i < boxes.length; i++) {
                    if (isInsideBox(x, y, boxes[i])) {
                        alert(boxes[i].text);
                        break;
                    }
                }
            }
        });

        // Initialize in dragging mode
        enableDragging();
    </script>
</body>
</html>
