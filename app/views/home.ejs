<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
<title><%= title %></title>
<style>
    body, html {
        margin: 0;
        height: 100%;
        overflow: hidden;
    }

    #board-container {
        width: 100%;
        height: 100%;
        overflow: hidden;
        position: relative;
        cursor: grab;
    }

    #board {
        position: absolute;
        width: 2000px; /* Large width for demonstration */
        height: 2000px; /* Large height for demonstration */
        background-color: #f3f3f3; /* Light grey background */
        border: 1px solid #d3d3d3;
        cursor: grab;
    }
</style>
</head>
<body>
<div id="board-container">
    <div id="board">
        <canvas id="myCanvas" width="2000" height="2000"></canvas>
    </div>
</div>

<script>
    var canvas = document.getElementById('myCanvas');
    var ctx = canvas.getContext('2d');

    // Array to store box data
    var boxes = [];

    // Function to draw a box and store its data
    function drawBox(x, y, text) {
        ctx.beginPath();
        ctx.rect(x, y, 100, 50); // Draw the rectangle
        ctx.stroke();

        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillText(text, x + 50, y + 25); // Add text

        // Store box data
        boxes.push({ x: x, y: y, width: 100, height: 50, text: text });
    }

    // Function to draw an "S" shaped line
    function drawSLine(x1, y1, x2, y2) {
        var midY = (y1 + y2) / 2;
        var controlDist = 0; // Distance of control points from the start/end points

        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.quadraticCurveTo(x1 + controlDist, midY, x1, midY);
        ctx.quadraticCurveTo(x1 - controlDist, midY, x2, y2);
        ctx.stroke();
    }

    // Calculate positions
    var parentX = 1000; // Center X
    var parentY = 25;   // Top Y
    var childY = 115;   // Child Y

    // Draw parent box
    drawBox(parentX - 50, parentY, 'Parent');

    // Draw child boxes and lines
    var childOffsets = [-100, 0, 100];
    childOffsets.forEach(function(offset) {
        var childX = parentX + offset;
        drawBox(childX - 50, childY, 'Child');
        drawSLine(parentX, parentY + 50, childX, childY);
    });


    const board = document.getElementById('board');
    let isDragging = false;
    let dragStartX, dragStartY;

    // Function to check if a point is inside a box
function isInsideBox(x, y, box) {
    return x >= box.x && x <= box.x + box.width && y >= box.y && y <= box.y + box.height;
}

// Click event listener for the canvas
canvas.addEventListener('click', function(e) {
    var rect = canvas.getBoundingClientRect();
    var x = e.clientX - rect.left;
    var y = e.clientY - rect.top;

    // Check each box to see if it was clicked
    for (var i = 0; i < boxes.length; i++) {
        if (isInsideBox(x, y, boxes[i])) {
            alert(boxes[i].text);
            break;
        }
    }
});

board.addEventListener('contextmenu', function(e) {
    e.preventDefault(); // Prevent context menu from opening
});

board.addEventListener('mousedown', function(e) {
    if (e.button === 2) { // Check if right mouse button was pressed
        isDragging = true;
        dragStartX = e.pageX - board.offsetLeft;
        dragStartY = e.pageY - board.offsetTop;
        board.style.cursor = 'grabbing';
    }
});

let touchStartX, touchStartY, isTwoFingerTouch = false;

board.addEventListener('touchstart', function(e) {
    if (e.touches.length === 2) { // Check for two fingers
        isTwoFingerTouch = true;
        touchStartX = e.touches[0].pageX - board.offsetLeft;
        touchStartY = e.touches[0].pageY - board.offsetTop;
    }
});

board.addEventListener('touchmove', function(e) {
    if (isTwoFingerTouch) {
        e.preventDefault(); // Prevent scrolling and zooming
        const newX = e.touches[0].pageX - touchStartX;
        const newY = e.touches[0].pageY - touchStartY;
        board.style.left = newX + 'px';
        board.style.top = newY + 'px';
    }
});

board.addEventListener('touchend', function(e) {
    if (e.touches.length < 2) {
        isTwoFingerTouch = false;
    }
});

    document.addEventListener('mouseup', function() {
        isDragging = false;
        board.style.cursor = 'grab';
    });

    document.addEventListener('mousemove', function(e) {
        if (!isDragging) return;
        const newX = e.pageX - dragStartX;
        const newY = e.pageY - dragStartY;
        board.style.left = newX + 'px';
        board.style.top = newY + 'px';
    });
</script>
</body>
</html>