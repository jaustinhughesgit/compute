<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Migrate embPaths</title>
  <style>
    :root { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial; }
    body { margin: 24px; color: #0f172a; background: #f8fafc; }
    h1 { margin: 0 0 12px; font-size: 22px; }
    .card { background: #fff; border: 1px solid #e2e8f0; border-radius: 12px; padding: 16px; max-width: 880px; box-shadow: 0 2px 10px rgba(2,6,23,.05); }
    label { display: block; font-weight: 600; margin: 12px 0 6px; }
    textarea, input[type="text"] { width: 100%; box-sizing: border-box; padding: 10px; border: 1px solid #cbd5e1; border-radius: 8px; background: #fff; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }
    .row { display: flex; align-items: center; gap: 12px; margin: 12px 0; flex-wrap: wrap; }
    .btn {
      appearance: none; border: 0; padding: 10px 16px; border-radius: 10px; font-weight: 700; cursor: pointer;
      background: #2563eb; color: white; box-shadow: 0 2px 8px rgba(37,99,235,.3);
    }
    .btn[disabled] { opacity: .6; cursor: not-allowed; }
    .muted { color: #64748b; font-size: 13px; }
    .status { margin-top: 10px; font-size: 14px; }
    .ok { color: #16a34a; }
    .err { color: #dc2626; }
    pre {
      margin-top: 16px; padding: 12px; background: #0b1021; color: #c0caf5; border-radius: 10px; overflow:auto;
      max-height: 60vh; white-space: pre-wrap; word-break: break-word;
    }
    .pill { display:inline-flex; align-items:center; gap:8px; padding:6px 10px; border-radius:999px; background:#eef2ff; color:#3730a3; font-size:12px; }
  </style>
</head>
<body>
  <div class="card">
    <h1>embPaths Migration</h1>
    <div class="muted">Calls <code>/admin/migrate-embpaths</code> to create/populate the <code>embPaths</code> table.</div>

    <label for="tables">Optional <code>tables</code> JSON (map of <em>i_table</em> → [roots])</label>
    <textarea id="tables" rows="6" placeholder='{"i_agriculture":["agroeconomics","agrochemicals"],"i_biology":["anatomy"]}'></textarea>

    <div class="row">
      <label class="pill">
        <input id="dryRun" type="checkbox" />
        Dry run (no writes)
      </label>
      <button id="runBtn" class="btn">Start Migration</button>
      <span id="status" class="status"></span>
    </div>

    <pre id="output" aria-live="polite">// Results will appear here…</pre>
  </div>

  <script>
    const btn = document.getElementById('runBtn');
    const out = document.getElementById('output');
    const status = document.getElementById('status');
    const dryRunEl = document.getElementById('dryRun');
    const tablesEl = document.getElementById('tables');

    function setBusy(isBusy, text) {
      btn.disabled = isBusy;
      status.textContent = text || (isBusy ? 'Running…' : '');
      status.className = 'status ' + (isBusy ? '' : '');
    }

    function safeParseJSON(s) {
      if (!s || !s.trim()) return null;
      try { return JSON.parse(s); } catch (e) { throw new Error('Invalid JSON in "tables": ' + e.message); }
    }

    async function startMigration() {
      setBusy(true, 'Starting…');
      out.textContent = '';

      let url = '/admin/migrate-embpaths';
      const params = new URLSearchParams();

      // dryRun toggle
      if (dryRunEl.checked) params.set('dryRun', '1');

      // tables JSON (optional)
      const tbl = tablesEl.value;
      if (tbl.trim()) {
        try {
          const obj = safeParseJSON(tbl);
          params.set('tables', JSON.stringify(obj));
        } catch (err) {
          setBusy(false, '');
          status.textContent = err.message;
          status.className = 'status err';
          return;
        }
      }

      if ([...params.keys()].length) url += '?' + params.toString();

      try {
        setBusy(true, 'Calling ' + url + ' …');
        const resp = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' }, credentials: 'same-origin' });
        const json = await resp.json().catch(() => ({}));
        if (!resp.ok || json.ok === false) {
          status.textContent = 'Migration failed.';
          status.className = 'status err';
        } else {
          status.textContent = 'Done.';
          status.className = 'status ok';
        }
        out.textContent = JSON.stringify(json, null, 2);
      } catch (e) {
        status.textContent = 'Network error: ' + e.message;
        status.className = 'status err';
        out.textContent = '';
      } finally {
        setBusy(false, '');
      }
    }

    btn.addEventListener('click', startMigration);
  </script>
</body>
</html>
