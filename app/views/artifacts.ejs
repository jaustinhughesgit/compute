<!-- views/artifacts.ejs -->
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Build Anchor Artifacts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 24px; }
      form { display: grid; gap: 12px; max-width: 780px; }
      label { font-weight: 600; }
      input[type="text"], input[type="number"], select { padding: 8px 10px; border: 1px solid #d0d7de; border-radius: 6px; }
      button { padding: 10px 14px; border-radius: 8px; border: 0; background:#111827; color:#fff; cursor:pointer; }
      .row { display: grid; grid-template-columns: 200px 1fr; gap: 10px; align-items: center; }
      .note { color:#6b7280; font-size: 13px; }
      .pill { display:inline-flex; align-items:center; gap:6px; background:#eef2ff; color:#1f2937; padding:6px 10px; border-radius:999px; margin:4px 6px 0 0; }
      .pill button { background: transparent; color:#6b7280; padding:0; cursor:pointer; }
      .stack { display:grid; gap:6px; }
      .section { margin: 26px 0 16px; font-size: 18px; }
      pre { background: #0b1020; color: #e5e7eb; padding: 12px; border-radius: 8px; overflow:auto; max-height: 360px; }
      .hr { height:1px; background:#e5e7eb; margin:24px 0; }
    </style>
  </head>
  <body>
    <h1>Build Anchor Artifacts</h1>
    <p class="note">
      Build artifacts in <b>chunks per <code>sourceTable</code></b> (using GSI <code>sourceTable-index</code>), then merge them.
      Outputs land in <code>s3://&lt;bucket&gt;/artifacts/&lt;anchor_set_id&gt;/&lt;sourceTable&gt;/...</code> and finally a combined bundle in
      <code>.../artifacts/&lt;anchor_set_id&gt;/_combined/</code>.
    </p>

    <!-- ========== CHUNK BUILDER (one sourceTable at a time) ========== -->
    <div class="section">Chunk builder (per <code>sourceTable</code>)</div>
    <form id="chunkForm" method="POST" action="/anchors/build-artifacts">
      <div class="row">
        <label for="bucket">S3 Bucket</label>
        <input type="text" id="bucket" name="bucket" value="<%= bucket %>" />
      </div>

      <div class="row">
        <label for="prefix">Base S3 Prefix</label>
        <input type="text" id="prefix" name="prefix" value="artifacts/" />
      </div>

      <div class="row">
        <label for="anchor_set_id">Anchor Set ID</label>
        <input type="text" id="anchor_set_id" name="anchor_set_id" value="<%= anchorSetId %>" />
      </div>

      <div class="row">
        <label for="band_scale">Band Scale</label>
        <input type="number" id="band_scale" name="band_scale" value="<%= bandScale %>" />
      </div>

      <div class="row">
        <label for="sourceTableSelect">sourceTable</label>
        <div class="stack">
          <select id="sourceTableSelect"></select>
          <div class="note">Populated from <code>sourceTable-index</code></div>
        </div>
      </div>

      <div class="row">
        <label>&nbsp;</label>
        <div class="stack">
          <button type="button" id="addSourceBtn">Add to list</button>
          <div id="selectedSources"></div>
          <div class="note">This list accumulates the chunks you plan to combine later.</div>
        </div>
      </div>

      <div class="row">
        <label for="id">Single Record ID</label>
        <input type="text" id="id" name="id" placeholder="(optional) exact id to build only this one" />
      </div>

      <div class="row">
        <label for="limit">Limit (safety)</label>
        <input type="number" id="limit" name="limit" value="0" />
      </div>

      <input type="hidden" id="sourceTable" name="sourceTable" />
      <button type="submit">Build Chunk for Selected sourceTable</button>
    </form>

    <h3>Chunk Response</h3>
    <pre id="rspChunk">(choose a source and click “Build”)</pre>

    <div class="hr"></div>

    <!-- ========== COMBINE ========== -->
    <div class="section">Combine built chunks</div>
    <form id="combineForm" method="POST" action="/anchors/combine-artifacts">
      <div class="row">
        <label for="bucket2">S3 Bucket</label>
        <input type="text" id="bucket2" name="bucket" value="<%= bucket %>" />
      </div>

      <div class="row">
        <label for="prefix2">Base S3 Prefix</label>
        <input type="text" id="prefix2" name="prefix" value="artifacts/" />
      </div>

      <div class="row">
        <label for="anchor_set_id2">Anchor Set ID</label>
        <input type="text" id="anchor_set_id2" name="anchor_set_id" value="<%= anchorSetId %>" />
      </div>

      <div class="row">
        <label for="band_scale2">Band Scale</label>
        <input type="number" id="band_scale2" name="band_scale" value="<%= bandScale %>" />
      </div>

      <div class="row">
        <label for="out_suffix">Output Suffix</label>
        <input type="text" id="out_suffix" name="out_suffix" value="_combined" />
      </div>

      <input type="hidden" id="sourcesJson" name="sources" />
      <button type="submit">Combine All Listed Chunks</button>
    </form>

    <h3>Combine Response</h3>
    <pre id="rspCombine">(click “Combine” when you’re ready)</pre>

    <script>
      const sel = document.getElementById('sourceTableSelect');
      const listEl = document.getElementById('selectedSources');
      const addBtn = document.getElementById('addSourceBtn');
      const chunkForm = document.getElementById('chunkForm');
      const combineForm = document.getElementById('combineForm');
      const rspChunk = document.getElementById('rspChunk');
      const rspCombine = document.getElementById('rspCombine');
      const hiddenSource = document.getElementById('sourceTable');
      const hiddenSourcesJson = document.getElementById('sourcesJson');

      let selected = JSON.parse(localStorage.getItem('selectedSources') || '[]');

      function renderSelected() {
        listEl.innerHTML = '';
        selected.forEach((name, idx) => {
          const pill = document.createElement('span');
          pill.className = 'pill';
          pill.innerHTML = `<span>${name}</span>`;
          const rm = document.createElement('button');
          rm.type = 'button';
          rm.textContent = '×';
          rm.addEventListener('click', () => {
            selected.splice(idx, 1);
            localStorage.setItem('selectedSources', JSON.stringify(selected));
            renderSelected();
          });
          pill.appendChild(rm);
          listEl.appendChild(pill);
        });
      }

      async function loadSourceTables() {
        try {
          const res = await fetch('/anchors/source-tables');
          const json = await res.json();
          sel.innerHTML = '';
          (json.sourceTables || []).forEach(st => {
            const opt = document.createElement('option');
            opt.value = st;
            opt.textContent = st;
            sel.appendChild(opt);
          });
        } catch (e) {
          sel.innerHTML = '<option value="">(error loading)</option>';
        }
      }

      addBtn.addEventListener('click', () => {
        const v = sel.value;
        if (!v) return;
        if (!selected.includes(v)) {
          selected.push(v);
          localStorage.setItem('selectedSources', JSON.stringify(selected));
          renderSelected();
        }
      });

      chunkForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const chosen = sel.value;
        if (!chosen) { alert('Pick a sourceTable first.'); return; }
        hiddenSource.value = chosen;

        const fd = new FormData(chunkForm);
        const body = new URLSearchParams(fd);
        rspChunk.textContent = 'Building chunk...';
        try {
          const res = await fetch(chunkForm.action, { method: 'POST', headers: {'Content-Type':'application/x-www-form-urlencoded'}, body });
          const json = await res.json();
          rspChunk.textContent = JSON.stringify(json, null, 2);
        } catch (err) {
          rspChunk.textContent = 'Error: ' + err.message;
        }
      });

      combineForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!selected.length) { alert('Add at least one sourceTable to the list.'); return; }
        hiddenSourcesJson.value = JSON.stringify(selected);

        const fd = new FormData(combineForm);
        const body = new URLSearchParams(fd);
        rspCombine.textContent = 'Combining...';
        try {
          const res = await fetch(combineForm.action, { method: 'POST', headers: {'Content-Type':'application/x-www-form-urlencoded'}, body });
          const json = await res.json();
          rspCombine.textContent = JSON.stringify(json, null, 2);
        } catch (err) {
          rspCombine.textContent = 'Error: ' + err.message;
        }
      });

      renderSelected();
      loadSourceTables();
    </script>
  </body>
</html>
