<!-- views/artifacts.ejs -->
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Build Anchor Artifacts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; padding: 24px; }
      form { display: grid; gap: 12px; max-width: 620px; }
      label { font-weight: 600; }
      input[type="text"], input[type="number"] { padding: 8px 10px; border: 1px solid #d0d7de; border-radius: 6px; }
      button { padding: 10px 14px; border-radius: 8px; border: 0; background:#111827; color:#fff; cursor:pointer; }
      .row { display: grid; grid-template-columns: 180px 1fr; gap: 10px; align-items: center; }
      .note { color:#6b7280; font-size: 13px; }
      pre { background: #0b1020; color: #e5e7eb; padding: 12px; border-radius: 8px; overflow:auto; }
    </style>
  </head>
  <body>
    <h1>Build Anchor Artifacts</h1>
    <p class="note">
      This bundles embeddings from <code><%= embTable %></code> into
      <code>embeddings.f32</code>, <code>ids.jsonl</code>, <code>meta.json</code>, and <code>stats.json</code>,
      uploading to <code>s3://<%= bucket %>/artifacts/</code> by default.
    </p>

    <form id="artifactForm" method="POST" action="/anchors/build-artifacts">
      <div class="row">
        <label for="bucket">S3 Bucket</label>
        <input type="text" id="bucket" name="bucket" value="<%= bucket %>" />
      </div>

      <div class="row">
        <label for="prefix">S3 Prefix</label>
        <input type="text" id="prefix" name="prefix" value="artifacts/" />
      </div>

      <div class="row">
        <label for="anchor_set_id">Anchor Set ID</label>
        <input type="text" id="anchor_set_id" name="anchor_set_id" value="<%= anchorSetId %>" />
      </div>

      <div class="row">
        <label for="band_scale">Band Scale</label>
        <input type="number" id="band_scale" name="band_scale" value="<%= bandScale %>" />
      </div>

      <div class="row">
        <label for="id">Single Record ID</label>
        <input type="text" id="id" name="id" placeholder="(optional) exact id to build only this one" />
      </div>

      <div class="row">
        <label for="limit">Limit</label>
        <input type="number" id="limit" name="limit" value="1" />
      </div>
<div class="row">
  <label for="chunk_size">Chunk size</label>
  <input type="number" id="chunk_size" name="chunk_size" value="150" />
</div>
<div class="row">
  <label for="continue_on_error">Continue on error</label>
  <input type="checkbox" id="continue_on_error" name="continue_on_error" checked />
</div>
      <button type="submit">Build & Upload Artifacts</button>
<button type="button" id="runChunked">Build in Chunks</button>
<button type="button" id="finalize">Finalize Manifest</button>
    </form>

    <h3>Response</h3>
    <pre id="rsp">(click the button to run)</pre>

    <script>
      const form = document.getElementById('artifactForm');
      const rsp  = document.getElementById('rsp');
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const fd = new FormData(form);
        const body = new URLSearchParams(fd);
        rsp.textContent = 'Building...';
        try {
          const res = await fetch(form.action, { method: 'POST', headers: {'Content-Type':'application/x-www-form-urlencoded'}, body });
          const json = await res.json();
          rsp.textContent = JSON.stringify(json, null, 2);
        } catch (err) {
          rsp.textContent = 'Error: ' + err.message;
        }
      });


  const rsp  = document.getElementById('rsp');
  const btnChunked = document.getElementById('runChunked');
  const btnFinalize = document.getElementById('finalize');

  btnChunked.addEventListener('click', async () => {
    const fd = new FormData(document.getElementById('artifactForm'));
    const base = Object.fromEntries(fd.entries());
    base.continue_on_error = document.getElementById('continue_on_error').checked ? 'true' : 'false';

    let cursor = null, chunkIndex = 1, done = false;
    rsp.textContent = 'Running chunked build...\n';

    while (!done) {
      const body = new URLSearchParams({
        bucket: base.bucket,
        prefix: base.prefix,
        anchor_set_id: base.anchor_set_id,
        band_scale: base.band_scale,
        chunk_size: base.chunk_size || '150',
        continue_on_error: base.continue_on_error,
        ...(cursor ? { cursor } : {}),
        chunk_index: String(chunkIndex)
      });

      try {
        const res = await fetch('/anchors/build-artifacts-chunk', {
          method: 'POST',
          headers: {'Content-Type':'application/x-www-form-urlencoded'},
          body
        });
        const json = await res.json();
        rsp.textContent += JSON.stringify(json, null, 2) + '\n';

        done = json.finished;
        cursor = json.nextCursor;
        chunkIndex = json.nextChunkIndex || chunkIndex + 1;

        // Small breather to play nice with Lambda concurrency limits
        await new Promise(r => setTimeout(r, 250));
      } catch (err) {
        rsp.textContent += 'Error: ' + err.message + '\n';
        break;
      }
    }
  });

  btnFinalize.addEventListener('click', async () => {
    const fd = new FormData(document.getElementById('artifactForm'));
    const body = new URLSearchParams({ bucket: fd.get('bucket'), prefix: fd.get('prefix') });
    rsp.textContent = 'Finalizing manifest...\n';
    try {
      const res = await fetch('/anchors/finalize-artifacts', {
        method: 'POST', headers: {'Content-Type':'application/x-www-form-urlencoded'}, body
      });
      const json = await res.json();
      rsp.textContent += JSON.stringify(json, null, 2) + '\n';
    } catch (err) {
      rsp.textContent += 'Error: ' + err.message + '\n';
    }
  });
    </script>
  </body>
</html>
